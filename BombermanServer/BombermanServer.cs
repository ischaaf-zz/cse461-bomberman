using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Lidgren.Network;
using BombermanObjects;

namespace BombermanServer
{
    public class BombermanServer
    {
        public static readonly int SERVER_PORT = 12346;
        GameManager manager;
        NetPeerConfiguration config;
        NetServer server;
        int totalPlayers;


        public BombermanServer(int players)
        {
            config = new NetPeerConfiguration("server");
            config.Port = SERVER_PORT;

            server = new NetServer(config);

            manager = new GameManager(players);
            totalPlayers = players;
            
            
        }
        
        public void Start()
        {
            server.Start();
            // while connected clients less than players
            //  accept connection
            //  receive message and check if it an actual client, special message.
            //  if actual client, assign an id, and send that id to the client
            //      create the network interface between server and client with client network info
            //      store this info in an array

            //      manager.setInputEventSource(...)
            //      manager.setOutputEventSource(...)

            // after while loop, game manager is all setup
            // now create ServerBroadcastThread and pass in network interface info
            //  and also a reference to queue of events generated by the server that
            //  needs to be sent over to the clients. ServeBroadcastThread will poll
            //  events from the queue and broadcast to all clients.
            //
            // BROADCAST GAME START. (3 times 1 second intervals)
            //
            // while(true)
            //  for each client network interface
            //      if HasNext
            //          pollEvent (x events)
            //          verifyEventsAreLegal thru game manager
            //          update game manager state
            //          poll game manager for any special events(player death, player x wins, etc)
            //              if (win)
            //                  break????
            //          enqueue valid events into queues
            //          
        }
    }
}
